#!/bin/zsh
#
# Build script for Python 3 framework for UMAD
# Taken from https://github.com/munki/munki/blob/Munki3dev/code/tools/build_python_framework.sh

# IMPORTANT
# Run this with your current directory being the path where this script is located

UMADROOT=$(dirname $0)
REQUIREMENTS="${UMADROOT}/py3_requirements.txt"
PYTHON_VERSION=3.8.0
FRAMEWORKDIR="${UMADROOT}/payload/Library/umad"

while getopts "S:" option
do
    case $option in
        "S" )
            APPSIGNINGCERT="$OPTARG"
            ;;
    esac
done
shift $(($OPTIND - 1))

# Sanity checks.
GIT=$(which git)
WHICH_GIT_RESULT="$?"
if [ "${WHICH_GIT_RESULT}" != "0" ]; then
    echo "Could not find git in command path. Maybe it's not installed?" 1>&2
    echo "You can get a Git package here:" 1>&2
    echo "    https://git-scm.com/download/mac"
    exit 1
fi
if [ ! -d "${UMADROOT}/payload" ]; then
    echo "Does not look like you are running this script from a umad git repo." 1>&2
    exit 1
fi
if [ ! -f "${REQUIREMENTS}" ]; then
    echo "Missing requirements file at ${REQUIREMENTS}." 1>&2
    exit 1
fi

# clone our relocatable-python tool
PYTHONTOOLDIR="/tmp/relocatable-python-git"
if [ -d "${PYTHONTOOLDIR}" ]; then
    /bin/rm -rf "${PYTHONTOOLDIR}"
fi
echo "Cloning relocatable-python tool from github..."
git clone https://github.com/gregneagle/relocatable-python.git "${PYTHONTOOLDIR}"
CLONE_RESULT="$?"
if [ "${CLONE_RESULT}" != "0" ]; then
    echo "Error cloning relocatable-python tool repo: ${CLONE_RESULT}" 1>&2
    exit 1
fi

# remove existing munki-pkg Python.framework if present
if [ -d "${FRAMEWORKDIR}/Python.framework" ]; then
    /bin/rm -rf "${FRAMEWORKDIR}/Python.framework"
fi

# build the framework
"${PYTHONTOOLDIR}/make_relocatable_python_framework.py" \
    --python-version "${PYTHON_VERSION}" \
    --pip-requirements "${REQUIREMENTS}" \
    --destination "${FRAMEWORKDIR}"

if [ "${APPSIGNINGCERT}" != "" ]; then
    echo "Signing Python.framework..."

    find ${FRAMEWORKDIR}/Python.framework/Versions/3.8/lib/ -type f -perm -u=x -exec codesign --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" {} \;
    find ${FRAMEWORKDIR}/Python.framework/Versions/3.8/bin/ -type f -perm -u=x -exec codesign --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" {} \;

    find ${FRAMEWORKDIR}/Python.framework/Versions/3.8/lib/ -type f -name "*dylib" -exec codesign --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" {} \;

    /usr/libexec/PlistBuddy -c "Add :com.apple.security.cs.allow-unsigned-executable-memory bool true" ${FRAMEWORKDIR}/entitlements.plist

    codesign --force --entitlements ${FRAMEWORKDIR}/entitlements.plist --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" ${FRAMEWORKDIR}/Python.framework/Versions/3.8/Resources/Python.app/

    codesign --force --entitlements ${FRAMEWORKDIR}/entitlements.plist --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" ${FRAMEWORKDIR}/Python.framework/Versions/3.8/bin/python3.8
    codesign --force --entitlements ${FRAMEWORKDIR}/entitlements.plist --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" ${FRAMEWORKDIR}/Python.framework/Versions/3.8/bin/python3.8m
    codesign --deep --verbose --options runtime --timestamp -s "${APPSIGNINGCERT}" ${FRAMEWORKDIR}/Python.framework

    rm ${FRAMEWORKDIR}/entitlements.plist
    
    echo "Signing complete!"
fi