#!/Library/umad/Python.framework/Versions/3.8/bin/python3
# -*- coding: utf-8 -*-
'''umad - python wrapper for UAMDM/DEP enrollment and annoying the users to
actually enroll.'''
import json
import optparse
import os
import platform
import plistlib
import re
import shutil
import sqlite3
import subprocess
import sys
import tempfile
import time
import urllib.request, urllib.parse, urllib.error
import webbrowser
from datetime import datetime
from distutils.version import LooseVersion
from urllib.parse import urlparse, unquote
import Foundation
import objc
from AppKit import NSApplication, NSImage
from Foundation import (CFPreferencesAppSynchronize, CFPreferencesCopyAppValue,
                        CFPreferencesCopyValue, CFPreferencesSetValue,
                        CFPreferencesSynchronize, NSBundle,
                        kCFPreferencesCurrentHost, kCFPreferencesCurrentUser,
                        NSHTTPURLResponse, NSDistributedNotificationCenter)
from SystemConfiguration import SCDynamicStoreCopyConsoleUser

from nibbler import *
import gurl


class timerController(Foundation.NSObject):
    '''Thanks to frogor for help in figuring this part out'''
    def activateWindow_(self, timer_obj):
        umadlog('Re-activating .nib to the foreground')
        # Move the application to the front
        NSApplication.sharedApplication().activateIgnoringOtherApps_(True)
        # Move the main window to the front
        # Nibbler objects have a .win property (...should probably be .window)
        # that contains a reference to the first NSWindow it finds
        umad.win.makeKeyAndOrderFront_(None)


class mdmTimerController(Foundation.NSObject):
    '''The MDM timer controller'''
    def checkMDMStatus_(self, timer_obj):
        '''check mdm status in a timer'''
        check_mdm_status(True)


class Error(Exception):
    """Base exception for fetch errors"""
    pass


class GurlError(Error):
    """General exception for gurl errors"""
    pass


class ConnectionError(GurlError):
    """General exception for gurl connection errors"""
    pass


class HTTPError(GurlError):
    """General exception for http/https errors"""
    pass


class DownloadError(Error):
    """Base exception for download errors"""
    pass


class FileCopyError(DownloadError):
    """Download failed because of file copy errors."""
    pass


def button_moreinfo():
    '''Open browser more info button'''
    webbrowser.open_new_tab(moreinfourl)


def button_manualenrollment():
    '''Open browser manual enrollment button'''
    webbrowser.open_new_tab(manualenrollmenturl)


def button_ok():
    '''Quit out of umad if user hits the ok button'''
    umad.quit()


def button_sysprefs():
    '''Open System Preferences'''
    cmd = [
        '/usr/bin/open', '/System/Library/PreferencePanes/Profiles.prefPane']
    subprocess.Popen(cmd)


def button_understand():
    '''Add an extra button to force the user to read the dialog, prior to being
    able to exit the UI.'''
    umad.views['button.understand'].setHidden_(True)
    umad.views['button.ok'].setHidden_(False)
    umad.views['button.ok'].setEnabled_(True)


def check_mdm_status(umadupdate):
    '''Check MDM Status'''
    uamdm_enrolled = False
    mdm_enrolled = False
    # Check the OS and run our dep checks based on OS version
    if get_os_version() >= LooseVersion('10.13.4'):
        umadlog('Checking mdm status - modern')
        if check_mdm_status_modern()[2]:
            umadlog('MDM enrolled device %s' % get_os_version())
            uamdm_enrolled = True
            if umadupdate:
                umad.quit()
        else:
            # Check if MDM is installed.
            if check_mdm_status_modern()[1]:
                umadlog('Non-UAMDM enrolled device, trigger UAMDM UI')
                mdm_enrolled = True
                uamdm_enrolled = False
                if umadupdate:
                    update_umad_ui_uamdm(uamdmparagraph1, uamdmparagraph2,
                                         uamdmparagraph3)
    else:
        # Anything lower than 10.13.4, we just check if the profile is
        # installed
        umadlog('Checking mdm status - legacy')
        if check_mdm_legacy(mdm_profile_identifier):
            mdm_enrolled = True
            umadlog('MDM enrolled device %s' % get_os_version())
            if umadupdate:
                umad.quit()
    return uamdm_enrolled, mdm_enrolled


def check_mdm_legacy(mdm_profile_identifier):
    '''Check MDM enrollment for older machines'''
    check_payload_type = False
    if mdm_profile_identifier == 'B68ABF1E-70E2-43B0-8300-AE65F9AFA330':
        umadlog('WARN - Did not set mdm profile identifier!')
        check_payload_type = True
    cmd = ['/usr/bin/profiles', '-C', '-o', 'stdout-xml']
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    if check_payload_type:
        try:
            plist = plistlib.loads(output)
        except:  # noqa
            plist = {'_computerlevel': []}
        try:
            for possible_plist in plist['_computerlevel']:
                for item_content in possible_plist['ProfileItems']:
                    try:
                        profile_type = item_content['PayloadType']
                    except KeyError:
                        profile_type = ''
                    if profile_type == 'com.apple.mdm':
                        return True
            return False
        except KeyError:
            return False
    else:
        try:
            plist = plistlib.loads(output)
        except:  # noqa
            plist = {'_computerlevel': []}
        try:
            for possible_plist in plist['_computerlevel']:
                try:
                    profile_uuid = possible_plist['ProfileIdentifier']
                except KeyError:
                    profile_uuid = ''
                if profile_uuid == mdm_profile_identifier:
                    return True
            return False
        except KeyError:
            return False


def check_mdm_high_sierra_legacy():
    '''Only for 10.13.0 -> 10.13.3'''
    enrolled = 'An enrollment profile is currently installed on this system'
    not_enrolled = 'There is no enrollment profile installed on this system'
    cmd = ['/usr/bin/profiles', 'status', '-type', 'enrollment']
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    status = output.split(b'\n')[0]
    if enrolled in status:
        return True
    elif not_enrolled in status:
        return False
    return False


def check_mdm_status_modern():
    '''Only for 10.13.4 and higher'''
    dep_enrolled = b'Enrolled via DEP: Yes'
    # dep_not_enrolled = 'Enrolled via DEP: No'
    uamdm_enrolled = b'MDM enrollment: Yes (User Approved)'
    # uamdm_not_enroll = 'MDM enrollment: Yes'
    mdm_not_enrolled = b'MDM enrollment: No'
    cmd = ['/usr/bin/profiles', 'status', '-type', 'enrollment']
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    dep_status = output.split(b'\n')[0]
    mdm_status = output.split(b'\n')[1]
    dep_enrollment_status = bool(dep_enrolled == dep_status)
    mdm_enrollment_status = bool(mdm_not_enrolled != mdm_status)
    uamdm_enrollment_status = bool(uamdm_enrolled == mdm_status)
    return (dep_enrollment_status, mdm_enrollment_status,
            uamdm_enrollment_status)


def do_not_disturb_isset():
    '''Check if DND is set'''
    bundle_id = 'com.apple.notificationcenterui'
    do_not_disturb = CFPreferencesCopyAppValue('doNotDisturb', bundle_id)
    dndStart = CFPreferencesCopyAppValue('dndStart', bundle_id)
    dndEnd = CFPreferencesCopyAppValue('dndEnd', bundle_id)
    do_not_disturb_by_host = CFPreferencesCopyValue('doNotDisturb', bundle_id,
                                                    kCFPreferencesCurrentUser,
                                                    kCFPreferencesCurrentHost)
    return bool(do_not_disturb or do_not_disturb_by_host), dndStart, dndEnd


def do_not_disturb_set_value(dnd_on_or_off, dnd_start, dnd_end):
    '''Enable or Disable DND'''
    bundle_id = 'com.apple.notificationcenterui'

    CFPreferencesSetValue('dndStart', dnd_start, bundle_id,
                        kCFPreferencesCurrentUser,
                        kCFPreferencesCurrentHost)
    CFPreferencesSetValue('dndEnd', dnd_end, bundle_id,
                        kCFPreferencesCurrentUser,
                        kCFPreferencesCurrentHost)

    CFPreferencesSetValue('doNotDisturb', dnd_on_or_off, bundle_id,
                          kCFPreferencesCurrentUser,
                          kCFPreferencesCurrentHost)
    
    CFPreferencesSynchronize(bundle_id,
                             kCFPreferencesCurrentUser,
                             kCFPreferencesCurrentHost)
    CFPreferencesAppSynchronize(bundle_id)


def header_dict_from_list(array):
    """Given a list of strings in http header format, return a dict.
    A User-Agent header is added if none is present in the list.
    If array is None, returns a dict with only the User-Agent header."""
    header_dict = {}

    if array is None:
        return header_dict
    for item in array:
        (key, sep, value) = item.partition(':')
        if sep and value:
            header_dict[key.strip()] = value.strip()
    return header_dict


def downloadfile(url, destinationpath,
                custom_headers=None, message=None,
                resume=False, follow_redirects=False):
    '''download file with gurl'''

    tempdownloadpath = destinationpath + '.download'
    if os.path.exists(tempdownloadpath) and not resume:
        os.remove(tempdownloadpath)

    url_parse = urllib.parse.urlparse(url)
    if url_parse.scheme == 'file':
        # copy from source to temporary destination
        try:
            shutil.copy2(url_parse.path, tempdownloadpath)
        except IOError as err:
            raise FileCopyError('Copy IOError: %s' % str(err))

        # rename temp destination to final destination
        try:
            os.rename(tempdownloadpath, destinationpath)
        except OSError as err:
            raise FileCopyError('Renaming %s: %s' % (destinationpath, str(err)))

        return True

    options = {'url': url,
               'file': tempdownloadpath,
               'follow_redirects': follow_redirects,
               'can_resume': resume,
               'additional_headers': header_dict_from_list(custom_headers)}

    connection = gurl.Gurl.alloc().initWithOptions_(options)
    stored_percent_complete = -1
    stored_bytes_received = 0
    connection.start()
    try:
        while True:
            connection_done = connection.isDone()
            if (str(connection.status).startswith('2')
                and connection.percentComplete != -1):
                if connection.percentComplete != stored_percent_complete:
                    # display percent done if it has changed
                    stored_percent_complete = connection.percentComplete
                    umadlog(('Downloading %s - Percent complete: %s ' % (
                        url, stored_percent_complete)))
            elif connection.bytesReceived != stored_bytes_received:
                stored_bytes_received = connection.bytesReceived
                umadlog(('Downloading %s - Bytes received: %s ' % (
                    url, stored_percent_complete)))
            if connection_done:
                break

    except (KeyboardInterrupt, SystemExit):
        # safely kill the connection then fall through
        connection.cancel()
    except Exception:  # too general, I know
        # Let us out! ... Safely! Unexpectedly quit dialogs are annoying ...
        connection.cancel()
        # Re-raise the error
        raise GurlError(-1, str(err))

    if connection.error is not None:
        umadlog(('Download error: %s %s ' % (str(connection.error.code()),
                                  str(connection.error.localizedDescription()))))
        if connection.SSLerror:
            umadlog('SSL error detail: %s ' % (str(connection.SSLerror)))
        
        if os.path.exists(tempdownloadpath) and not resume:
            os.remove(tempdownloadpath)
        raise ConnectionError(connection.error.code(),
                              connection.error.localizedDescription())
    if connection.response is not None:
        umadlog('Status: %s ' % (str(connection.status)))
        umadlog('Headers: %s ' % (str(connection.headers)))
    if connection.redirection != []:
        umadlog('Redirection: %s ' % (str(connection.redirection)))
    
    temp_download_exists = os.path.isfile(tempdownloadpath)
    connection.headers['http_result_code'] = str(connection.status)
    description = NSHTTPURLResponse.localizedStringForStatusCode_(
        connection.status)
    connection.headers['http_result_description'] = description

    if str(connection.status).startswith('2') and temp_download_exists:
        try:
            os.rename(tempdownloadpath, destinationpath)
        except OSError as err:
            # Re-raise the error as a GurlError
            raise GurlError(-1, str(err))
        return connection.headers
    else:
        # there was an HTTP error of some sort; remove our temp download.
        if os.path.exists(tempdownloadpath):
            try:
                os.unlink(tempdownloadpath)
            except OSError:
                pass
        raise HTTPError(connection.status,
                        connection.headers.get('http_result_description', ''))

def get_all_notifications_legacy():
    '''Parse old notification db
    Largely inspired from https://github.com/ydkhatri/MacForensics'''
    try:
        db_path = b'com.apple.notificationcenter/db/db'
        input_path = os.path.join(get_user_temp_dir(), db_path)
        if os.path.exists(input_path):
            conn = sqlite3.connect(input_path)
            db_items = []
            conn.row_factory = sqlite3.Row
            cursor = conn.execute(
                'SELECT date_presented as time, '\
                '(SELECT bundleid from app_info WHERE app_info.app_id = '\
                'presented_notifications.app_id) AS bundle, (SELECT encoded_data '\
                'from notifications WHERE notifications.note_id = '\
                'presented_notifications.note_id) AS data from '\
                'presented_notifications ')
            for row in cursor:
                data = {}
                if get_os_version() >= LooseVersion('10.11'):
                    plist = plistlib.loads(row['data'])
                    title = plist['$objects'][2]
                    message = plist['$objects'][3]
                    data['message'] = message
                    data['title'] = title
                date = row['time']
                date_time = datetime.utcfromtimestamp(date + 978307200)
                app = row['bundle']
                data['app'] = app
                data['date'] = date_time
                db_items.append(data)
            conn.close()
            return db_items
    except (sqlite3.OperationalError, IndexError, TypeError, KeyError):
        return []
    return []


def get_all_notifications_modern():
    '''Parse High Sierra's notification db
    Largely inspired from https://github.com/ydkhatri/MacForensics'''
    try:
        db_path = b'com.apple.notificationcenter/db2/db'
        input_path = os.path.join(get_user_temp_dir(), db_path)
        if os.path.exists(input_path):
            conn = sqlite3.connect(input_path)
            db_items = []
            conn.row_factory = sqlite3.Row
            cursor = conn.execute(
                'SELECT (SELECT identifier from app where '\
                'app.app_id=record.app_id) as app, data, presented, '\
                'delivered_date FROM record')
            for row in cursor:
                plist = plistlib.loads(row['data'])
                plist_data = plist['req']
                date = row['delivered_date']
                date_time = datetime.utcfromtimestamp(date + 978307200)
                if date == None:
                  # This avoids a type error for apps that put entries with
                  # blank delivery dates in the notification DB for syncing purposes.
                  # We don't care about those anyway.
                  continue
                app = row['app']
                title = plist_data.get('titl', '')
                message = plist_data.get('body', '')
                data = {}
                data['app'] = app
                data['date'] = date_time
                data['message'] = message
                data['title'] = title
                db_items.append(data)
            conn.close()
            return db_items
    except (sqlite3.OperationalError, IndexError, TypeError, KeyError):
        return []
    return []


def get_console_username_info():
    '''Uses Apple's SystemConfiguration framework to get the current
    console username'''
    return SCDynamicStoreCopyConsoleUser(None, None, None)


def get_os_version():
    '''Return OS version.'''
    return LooseVersion(platform.mac_ver()[0])


def umadlog(text):
    '''logger for umad'''
    Foundation.NSLog('[UMAD] ' + text)


def get_parsed_options():
    '''Return the parsed options and args for this application.'''
    # Options
    usage = '%prog [options]'
    options = optparse.OptionParser(usage=usage)
    options.add_option('--headers', help=('Optional: Auth headers'))
    options.add_option('--configurl', help=('Required: URL to config folder'))
    return options.parse_args()


def get_serial():
    '''Get system serial number'''
    # Credit to Michael Lynn
    IOKit_bundle = Foundation.NSBundle.bundleWithIdentifier_('com.apple.framework.IOKit')

    functions = [("IOServiceGetMatchingService", b"II@"),
                 ("IOServiceMatching", b"@*"),
                 ("IORegistryEntryCreateCFProperty", b"@I@@I"),
                ]

    objc.loadBundleFunctions(IOKit_bundle, globals(), functions)
    # pylint: disable=undefined-variable
    serial = IORegistryEntryCreateCFProperty(
        IOServiceGetMatchingService(
            0,
            IOServiceMatching(
                "IOPlatformExpertDevice".encode("utf-8")
            )),
        Foundation.NSString.stringWithString_("IOPlatformSerialNumber"),
        None,
        0)
    # pylint: enable=undefined-variable
    return serial


def get_user_temp_dir():
    '''get user's temp dir'''
    darwin_user_dir = subprocess.check_output(
        ['/usr/bin/getconf', 'DARWIN_USER_DIR']).rstrip()
    return darwin_user_dir


def has_dep_activation_record(plist_path):
    '''Check if we have a dep activation record'''
    try:
        with open(plist_path, "rb") as file:
            plist = plistlib.load(file)
    except:  # noqa
        plist = {}
    if not plist:
        return False
    else:
        return True


def restart_notification_center():
    '''Restart NotificationCenter by killing, letting LaunchD respawn.'''
    default_center = NSDistributedNotificationCenter.defaultCenter()
    default_center.postNotificationName_object_userInfo_deliverImmediately_(
        'com.apple.notificationcenterui.dndprefs_changed', None, None, True)
    subprocess.call(['/usr/bin/killall', 'NotificationCenter'])


def load_umad_globals():
    '''Try to figure out the path of umad.nib and load it.'''
    try:
        # Figure out the local path of umad
        global umad_path
        umad_path = os.path.dirname(os.path.realpath(__file__))
        # Setup our global umad variable to inject into our nib file
        global umad
        umad = Nibbler(os.path.join(umad_path, 'umad.nib'))
    except IOError:
        umadlog('Unable to load umad nib file!')
        exit(20)


def umad_already_loaded():
    '''Check if umad is already loaded'''
    umad_string = '/Library/umad/Resources/umad'
    cmd = ['/bin/ps', '-o', 'pid', '-o', 'command']
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    status = output.split(b'\n')
    current_pid = str(os.getpid())
    for line in status:
        if bytes(umad_string, 'utf-8') in line:
            if bytes(current_pid, 'utf-8') in line:
                pass
            else:
                return True
    return False


def touch(path):
    '''Touch a file'''
    try:
        touchfile = ['/usr/bin/touch', path]
        proc = subprocess.Popen(touchfile, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        touchfileoutput, err = proc.communicate()
        os.chmod(path, 0o777)
        return touchfileoutput
    except Exception:
        return None


def update_umad_ui_uamdm(uamdm_p1, uamdm_p2, uamdm_p3):
    '''Update the umad UI for UAMDM'''
    umad.views['field.paragraph1'].setStringValue_(uamdm_p1)
    umad.views['field.paragraph2'].setStringValue_(uamdm_p2)
    umad.views['field.paragraph3'].setStringValue_(uamdm_p3)
    umad.views['image.nagscreen'].setImage_(uamdm_ss_nsimage)
    umad.views['button.sysprefs'].setHidden_(False)
    umad.views['field.manualenrollmenttext'].setHidden_(True)
    umad.views['image.nagscreen'].setHidden_(False)
    umad.views['field.depfailuretext'].setHidden_(False)
    umad.views['field.depfailuresubtext'].setHidden_(False)
    umad.views['field.depfailuretext'].setStringValue_(sysprefs_h1_text)
    umad.views['field.depfailuresubtext'].setStringValue_(sysprefs_h2_text)


def get_config(base_url, config_name, headers=None):
    if not base_url.endswith('/'):
        base_url = base_url + '/'

    config_url = (
        base_url + urllib.parse.quote(config_name.encode('UTF-8')))
    
    umadlog('Config base URL is: %s' % base_url)
    umadlog('Getting config file %s...' % config_name)

    tmp_dir = tempfile.mkdtemp()
    destinationpath = os.path.join(tmp_dir, config_name.lstrip('/'))

    # Grab auth headers if they exist and update the json_data dict.
    if headers:
        headers = ['Authorization: %s' % headers]

    umadlog(('Starting download: %s' % (urllib.parse.unquote(
        config_url))))

    downloadfile(config_url, destinationpath,
        custom_headers=headers)

    umadlog(('Download finished: %s' % (urllib.parse.unquote(
        config_url))))

    return destinationpath


def get_primary_config(base_url, headers=None):
    
    json_path = ""

    serial = get_serial()
    config_name = serial + '.json'

    umadlog('Requesting %s...' % config_name)

    try:
        json_path = get_config(base_url, config_name, headers)
    except Exception:
        pass

    if not json_path:
        # last resort - try for the default config file
        config_name = 'default.json'
        umadlog('Request failed. Requesting %s...' % config_name)
        json_path = get_config(base_url, config_name, headers)
    
    return json_path
    

def main():
    '''Main thread'''
    opts, _ = get_parsed_options()

    main_umad_path = '/Library/umad'

    # local json path - if it exists already, let's assume someone is bundling
    # it with their package. Otherwise check for it and use gurl.
    json_path = os.path.join(main_umad_path, 'Resources/umad.json')
    cleanup = True
    if os.path.isfile(json_path):
        cleanup = False
    else:
        if not opts.configurl:
            umadlog('umad config url not specified!')
            exit(1)
            
        try:
            json_path = get_primary_config(opts.configurl, opts.headers)
        except Exception as err:
            umadlog('Could not retrieve JSON config file.')
            umadlog('Error: {0}'.format(err))
            exit(1)

    # Load up file to grab all the items.  
    json_raw = open(json_path).read()
    umad_json = json.loads(json_raw)

    # Load umad preferences
    umad_prefs = umad_json['preferences']

    # Setup umad preferences and all defaults if not set
    global mdm_profile_identifier
    global manualenrollmenturl
    global moreinfourl
    global manualenrollmenttext
    global uamdmparagraph1
    global uamdmparagraph2
    global uamdmparagraph3
    global sysprefs_h1_text
    global sysprefs_h2_text
    global manualenroll_h1_text
    global manualenroll_h2_text

    cutoffdate = umad_prefs.get('cut_off_date', False)
    cutoffdatewarning = umad_prefs.get('cut_off_date_warning', 3)
    depfailuretext = umad_prefs.get('dep_failure_text',
        'Not getting this notification?')
    depfailuresubtext = umad_prefs.get('dep_failure_subtext',
        'You can also enroll manually below:')
    duedatetext = umad_prefs.get('due_date_text',
        'MDM Enrollment is required (No Restart Required)')
    enableenrollmentbutton = umad_prefs.get('enable_enrollment_button', False)
    honordndsettings = umad_prefs.get('honor_dnd_settings', False)
    logopath = umad_prefs.get('logo_path',
        'company_logo.png')
    manualenrollmenturl = umad_prefs.get('enrollment_url',
        'https://apple.com')
    manualenrollmenttext = umad_prefs.get('manual_enrollment_text',
        'Manual Enrollment Required')
    manualenroll_h1_text = umad_prefs.get('manualenroll_h1_text',
        'Want this box to go away?')
    manualenroll_h2_text = umad_prefs.get('manualenroll_h2_text',
        'Click on the Manual Enrollment button below.')
    moreinfourl = umad_prefs.get('more_info_url',
        'https://google.com')
    nagsspath = umad_prefs.get('nag_ss_path',
        'nag_ss.png')
    notimer = umad_prefs.get('no_timer', False)
    paragraph1 = umad_prefs.get('paragraph1',
        'Enrollment into MDM is required to ensure that IT '
        'can protect your computer with basic security necessities '
        'like encryption and threat detection.')
    paragraph2 = umad_prefs.get('paragraph2',
        'If you do not enroll into MDM you may lose access '
        'to some items necessary for your day-to-day tasks.')
    paragraph3 = umad_prefs.get('paragraph3',
        'To enroll, just look for the below notification, '
        'and click Details. Once prompted, log in with your '
        'username and password.')
    mdm_profile_identifier = umad_prefs.get('profile_identifier',
        'B68ABF1E-70E2-43B0-8300-AE65F9AFA330')
    subtitletext = umad_prefs.get('subtitle_text',
        'A friendly reminder from your local IT team')
    sysprefs_h1_text = umad_prefs.get('sysprefs_h1_text',
        'Want this box to go away?')
    sysprefs_h2_text = umad_prefs.get('sysprefs_h2_text',
        'Open System Preferences and approve Device '
        'Management.')
    timerday1 = umad_prefs.get('timer_day1', 600)
    timerday3 = umad_prefs.get('timer_day3', 7200)
    timerelapsed = umad_prefs.get('timer_elapsed', 10)
    timerfinal = umad_prefs.get('timer_final', 60)
    timerinital = umad_prefs.get('timer_initial', 14400)
    timermdm = umad_prefs.get('timer_mdm', 5)
    titletext = umad_prefs.get('title_text',
        'MDM Enrollment')
    uamdmparagraph1 = umad_prefs.get('uamdm_paragraph1',
        'Thank you for enrolling your device into MDM. We '
        'sincerely appreciate you doing this in a timely manner.')
    uamdmparagraph2 = umad_prefs.get('uamdm_paragraph2',
        'Unfortunately, your device has been detected as '
        'only partially enrolled into our system.')
    uamdmparagraph3 = umad_prefs.get('uamdm_paragraph3',
        'Please go to System Preferences -> Profiles, click '
        'on the Device Enrollment profile and click on the approve '
        'button.')
    uasspath = umad_prefs.get('ua_ss_path',
        'uamdm_ss.png')
    
    # cleanup the tmp stuff now
    if cleanup:
        umadlog('Cleaning up temporary files...')
        try:
            tmp_dir = os.path.dirname(json_path)
            if os.path.exists(tmp_dir):
                shutil.rmtree(tmp_dir)
        except Exception:
            pass

    mdm_profile_set = bool(
        mdm_profile_identifier != 'B68ABF1E-70E2-43B0-8300-AE65F9AFA330')
    manual_enrollment_url_set = bool(
        manualenrollmenturl != 'https://apple.com')
    more_info_url_set = bool(moreinfourl != 'https://google.com')
    if not mdm_profile_set:
        umadlog('WARN - Did not set mdm profile identifier!')

    # Check the OS and run our dep checks based on OS version
    mdm_status = check_mdm_status(False)
    uamdm_enrolled = mdm_status[0]
    mdm_enrolled = mdm_status[1]

    if uamdm_enrolled:
        exit(0)
    elif get_os_version() < LooseVersion('10.13.4'):
        if mdm_enrolled:
            exit(0)

    # If we get here, device is not MDM enrolled or device is 10.13.4+
    # without UAMDM - check if umad is already running
    if umad_already_loaded():
        umadlog('umad already loaded!')
        exit(0)

    # We don't want to nag if device is UAMDM and DEP capable at the same time
    # - at the very least, bad things happen with jamf Pro. If the admin does
    # not provide the profile identifier though, we don't know if the user
    # is on the wrong MDM.
    if mdm_profile_set:
        skip_nag_check = bool(
            get_os_version() >= LooseVersion('10.13.4') and mdm_enrolled and mdm_profile_set)
    else:
        umadlog('WARN - cannot validate enrolled MDM is correct!')
        skip_nag_check = bool(
            get_os_version() >= LooseVersion('10.13.4') and mdm_enrolled)

    # Attempt to load our umad globals
    load_umad_globals()

    # Get the current username
    user_name, current_user_uid, _ = get_console_username_info()

    # Bail if we are not in a user session.
    if user_name in (None, 'loginwindow', '_mbsetupuser'):
        exit(0)

    umad_tmp_dir = '/private/var/tmp/umad'
    if not os.path.exists(umad_tmp_dir):
        os.makedirs(umad_tmp_dir)

    nag_triggered = False

    if skip_nag_check:
        # Trick logic into thinking device isn't DEP capable
        dep_capable = False
    else:
        # Check DND status
        dnd_status = do_not_disturb_isset()

        original_dnd_status = dnd_status[0]
        original_dnd_start = dnd_status[1]
        original_dnd_end = dnd_status[2]

        dep_plist = os.path.join(main_umad_path, 'Resources/dep_record.plist')
        # Because of a wonderful bug, when we check the dep activation record,
        # if the user hasn't enrolled, this will actually nag them, resulting
        # in two nags when our actual tool runs - work around this by turning
        # on DND even if it's not on
        if not original_dnd_status:
            do_not_disturb_set_value(True, 0, 1440)
            umadlog('Temporarily enabling DND for DEP activation record check')
            # Restart Notification Center to have CFPreferences take effect
            restart_notification_center()

        # Either we need to nag and show the umad DEP UI or we need show manual
        # enrollment UI - this unfortunately requires root access
        trigger_path = os.path.join(umad_tmp_dir, '.check_dep_record')
        touch(trigger_path)
        while os.path.exists(trigger_path):
            umadlog('Waiting for DEP record check...')
            time.sleep(1)

        if has_dep_activation_record(dep_plist):
            dep_capable = True
            umadlog('Device DEP capable - True')
        else:
            dep_capable = False
            umadlog('Device DEP capable - False')

        if dep_capable:
            # Trigger Nag event
            # Force Notification center to refresh itself again
            nag_trigger_path = os.path.join(umad_tmp_dir, '.trigger_nag')
            touch(nag_trigger_path)
            while os.path.exists(nag_trigger_path):
                umadlog('Waiting for nag event...')
                time.sleep(1)
            restart_notification_center()
            # There is a bug in versions of macOS, where the nag will not show
            # up, even with DND turned on. If detected, show the manual
            # enrollment info
            valid_notifications = [
                '_system_center_:com.apple.mdmclient',
                '_SYSTEM_CENTER_:com.apple.mdmclient',
                '_SYSTEM_CENTER_:com.apple.mdmclient.cloudconfig'
            ]
            if get_os_version() >= LooseVersion('10.10'):
                # Check for nag event every 10th second for 10 seconds
                retries = 100
                while not nag_triggered:
                    if get_os_version() >= LooseVersion('10.13'):
                        notifications = get_all_notifications_modern()
                    else:
                        notifications = get_all_notifications_legacy()
                    if notifications:
                        last_notification = notifications[-1]['app']
                        nag_triggered = bool(
                            last_notification in valid_notifications)
                        if nag_triggered:
                            umadlog('Triggered nag event - True')
                            break
                    time.sleep(0.1)
                    retries -= 1
                    if retries == 0:
                        break
            if not nag_triggered:
                umadlog('Triggered nag event - False')

        if honordndsettings or not dep_capable:
            # We will honor DND settings for non-DEP devices, unless the admin
            # explicitly wants this- Otherwise the nag will actually disappear
            # immediately
            if original_dnd_status:
                umadlog('Re-enabling DND for user as it was previously set')
                do_not_disturb_set_value(True, original_dnd_start, original_dnd_end)
        else:
            # We need to disable DND so the nag can show up
            do_not_disturb_set_value(False, None, None)
        
        # Restart Notification Center to have CFPreferences take effect
        restart_notification_center()

    # Use the paths defined, or default to pngs in the same local path of
    # umad
    for index, path in enumerate([logopath, nagsspath, uasspath]):
        if path in ('company_logo.png', 'nag_ss.png', 'uamdm_ss.png'):
            local_png_path = os.path.join(
                umad_path, path).replace(' ', '%20')
        else:
            local_png_path = os.path.join(path).replace(' ', '%20')
        foundation_nsurl_path = Foundation.NSURL.URLWithString_(
            'file:' + local_png_path)
        foundation_nsdata = Foundation.NSData.dataWithContentsOfURL_(
            foundation_nsurl_path)
        foundation_nsimage = NSImage.alloc().initWithData_(
            foundation_nsdata)
        if index == 0:
            umad.views['image.companylogo'].setImage_(foundation_nsimage)
        elif index == 1:
            umad.views['image.nagscreen'].setImage_(foundation_nsimage)
        elif index == 2:
            global uamdm_ss_nsimage
            uamdm_ss_nsimage = foundation_nsimage

    # Attach all the nib buttons to functions
    umad.attach(button_manualenrollment, 'button.manualenrollment')
    umad.attach(button_moreinfo, 'button.moreinfo')
    umad.attach(button_ok, 'button.ok')
    umad.attach(button_understand, 'button.understand')
    umad.attach(button_sysprefs, 'button.sysprefs')

    # Setup More Info button visibility
    if not more_info_url_set:
        umad.views['button.moreinfo'].setHidden_(True)

    # Setup the UI fields
    umad.views['field.titletext'].setStringValue_(titletext)
    umad.views['field.subtitletext'].setStringValue_(subtitletext)
    umad.views['field.duedatetext'].setStringValue_(duedatetext)
    umad.views['field.paragraph1'].setStringValue_(paragraph1)
    umad.views['field.paragraph2'].setStringValue_(paragraph2)
    umad.views['field.paragraph3'].setStringValue_(paragraph3)
    umad.views['field.manualenrollmenttext'].setStringValue_(
        manualenrollmenttext)
    umad.views['field.depfailuretext'].setStringValue_(
        depfailuretext)
    umad.views['field.depfailuresubtext'].setStringValue_(
        depfailuresubtext)

    # Dynamically set username and serialnumber
    umad.views['field.username'].setStringValue_(str(user_name))
    umad.views['field.serialnumber'].setStringValue_(str(get_serial()))
    umad.views['field.mdmenrolled'].setStringValue_('No')
    if cutoffdate:
        todays_date = datetime.utcnow()
        cutoff_date = datetime.strptime(cutoffdate, '%Y-%m-%d-%H:%M')
        date_diff_seconds = (cutoff_date - todays_date).total_seconds()
        date_diff_days = int(round(date_diff_seconds / 86400))

        if date_diff_seconds >= 0:
            umad.views['field.daysremaining'].setStringValue_(
                date_diff_days)
        else:
            umad.views['field.daysremaining'].setStringValue_(
                'Past date!')

        cut_off_warn = bool(date_diff_seconds < int(
            cutoffdatewarning) * 86400)

        # Setup our timer controller
        umad.timer_controller = timerController.alloc().init()

        if date_diff_seconds <= 0:
            # If the cutoff date is over, get stupidly aggressive

            # Disable all buttons so the user cannot exit out of the
            # application, and have the manualenrollment button appear
            umad.views['button.ok'].setHidden_(True)
            umad.views['button.understand'].setHidden_(True)

            # Show the manual enrollment UI for emergency purposes
            umad.views['button.manualenrollment'].setHidden_(False)
            umad.views['field.manualenrollmenttext'].setHidden_(False)
            umad.views['image.nagscreen'].setHidden_(True)
            umad.views['field.depfailuretext'].setHidden_(False)
            umad.views['field.depfailuretext'].setStringValue_(
                manualenroll_h1_text)
            umad.views['field.depfailuresubtext'].setHidden_(False)
            umad.views['field.depfailuresubtext'].setStringValue_(
                manualenroll_h2_text)

            # Bring back umad to the foreground, every 10 seconds
            timer = float(timerelapsed)
        elif date_diff_seconds <= 3600:
            # If the cutoff date is within one hour, get very agressive

            # Disable all buttons so the user cannot exit out of the
            # application
            umad.views['button.ok'].setHidden_(True)
            umad.views['button.understand'].setHidden_(True)

            # Bring back umad to the foreground, every 60 seconds
            # (1 minute)
            timer = float(timerfinal)
        elif date_diff_seconds <= 86400:
            # If the cutoff date is within 86,400 seconds (24 hours), start
            # getting more agressive

            # Disable the ok button and require users to press understand
            # button first
            umad.views['button.ok'].setHidden_(True)

            # If the user doesn't close out of umad, we want it to
            # reappear - bring back umad to the foreground, every
            # 600 seconds (10 minutes)
            timer = float(timerday1)
        elif cut_off_warn:
            # If the cutoff date is within 259,200 seconds (72 hours) or
            # whatever the admin set, start getting a bit more agressive

            # Disable the ok button and require users to press understand
            # button first
            umad.views['button.ok'].setHidden_(True)

            # If the user doesn't close out of umad, we want it to
            # reappear - bring back umad to the foreground, every
            # 7,200 seconds (2 hours)
            timer = float(timerday3)
        else:
            # If the cutoff date is over 259,200 seconds (72 hours),
            # don't be that aggressive

            # Only require the ok button to exit out of umad
            umad.views['button.ok'].setHidden_(False)
            umad.views['button.understand'].setHidden_(True)

            # If the user doesn't close out of umad, we want it to
            # reappear - bring back umad to the foreground, every
            # 14,400 seconds (4 hours)
            timer = float(timerinital)

        umad.timer = (
            Foundation
            .NSTimer
            .scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
                timer, umad.timer_controller, 'activateWindow:', None, True))
    else:
        # If you elect not to use a cutoff date, then the UI will only
        # appear one time per run, and only use the ok button

        # Hide the fields used for the cutoff date
        umad.views['field.daysremainingtext'].setHidden_(True)
        umad.views['field.daysremaining'].setHidden_(True)

        # Only require the ok button to exit out of umad
        umad.views['button.ok'].setHidden_(False)
        umad.views['button.understand'].setHidden_(True)

        # Enable manual enrollment too
        if mdm_profile_set and manual_enrollment_url_set:
            umad.views['button.manualenrollment'].setHidden_(False)
        else:
            umad.views['field.depfailuresubtext'].setStringValue_(
                'Please contact your system administrator.')

        umad.views['field.depfailuretext'].setHidden_(False)
        umad.views['field.depfailuresubtext'].setHidden_(False)

        # If you didn't specify any defaults and the device is not DEP capable
        # it's really hard to have good data points
        if not dep_capable:
            umadlog('Did not specify any defaults and device is not DEP capable!')

        timer = float(timerday3)
        date_diff_seconds = 1000000

    # Use cut off dates, but don't use the timer functionality
    if notimer:
        umad.timer.invalidate()
        umadlog('Timer invalidated!')
    else:
        umadlog('Timer is set to %s' % str(timer))

    # Setup our mdm timer controller
    umad.mdm_timer_controller = mdmTimerController.alloc().init()
    mdm_timer = float(timermdm)
    umadlog('MDM Timer is set to %s' % str(mdm_timer))
    umad.mdm_timer = (
        Foundation
        .NSTimer
        .scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
            mdm_timer, umad.mdm_timer_controller, 'checkMDMStatus:', None, True))

    # Set up our window controller and delegate
    umad.hidden = True

    # If the device isn't dep capable, enable the manual enrollment button
    # Also if admin always wants the break glass option
    # Also enable if dep nag didn't actually pop-up
    if (not dep_capable and mdm_profile_set) or enableenrollmentbutton or not nag_triggered:
        umad.views['button.manualenrollment'].setHidden_(False)
        umad.views['field.manualenrollmenttext'].setHidden_(False)
        umad.views['image.nagscreen'].setHidden_(True)
        umad.views['field.depfailuretext'].setHidden_(False)
        umad.views['field.depfailuretext'].setStringValue_(
            manualenroll_h1_text)
        umad.views['field.depfailuresubtext'].setHidden_(False)
        umad.views['field.depfailuresubtext'].setStringValue_(
            manualenroll_h2_text)
    elif date_diff_seconds <= 0:
        umad.views['field.manualenrollmenttext'].setHidden_(True)
        umad.views['image.nagscreen'].setHidden_(False)
        umad.views['field.depfailuretext'].setHidden_(False)
        umad.views['field.depfailuretext'].setStringValue_(
            depfailuretext)
        umad.views['field.depfailuresubtext'].setHidden_(False)
        umad.views['field.depfailuresubtext'].setStringValue_(
            depfailuresubtext)

    # Do one final MDM check to instantly update the UI for UAMDM
    check_mdm_status(True)

    umad.run()


if __name__ == '__main__':
    main()
