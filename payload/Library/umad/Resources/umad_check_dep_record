#!/Library/umad/Python.framework/Versions/3.8/bin/python3
import os
import platform
import plistlib
import subprocess
import time
import Foundation
from distutils.version import LooseVersion
from shutil import copyfile


def get_os_version():
    '''Return OS version.'''
    return LooseVersion(platform.mac_ver()[0])


def umadlog(text):
    '''logger for umad'''
    Foundation.NSLog('[UMAD] ' + text)


def has_dep_activation_record(plist_path):
    # We can't use -o stdout-xml due to another Apple bug :)
    good_record = '/private/var/db/ConfigurationProfiles/.cloudConfigRecordFound'
    bad_record = '/private/var/db/ConfigurationProfiles/.cloudConfigRecordNotFound'
    if os.path.exists(plist_path):
        os.remove(plist_path)
    if get_os_version() >= LooseVersion('10.12'):
        cmd = ['/usr/bin/profiles', '-e', '-o', plist_path]
    elif get_os_version() >= LooseVersion('10.11') and get_os_version() < LooseVersion('10.12'):
        # This is not supported by Apple, but it works
        cmd = ['/usr/libexec/mdmclient', 'dep', 'nag']
    else:
        # This is really not supported by Apple, but I discovered it
        # Tested on 10.10.5
        # /usr/libexec/mdmclient cloudconfig
        cmd = ['/usr/libexec/mdmclient', 'cloudconfig']
    if get_os_version() >= LooseVersion('10.11'):
        run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, err = run.communicate()
    else:
        # Delete records in case it is already there.
        if os.path.isfile(good_record):
            os.remove(good_record)
        if os.path.isfile(bad_record):
            os.remove(bad_record)
        run = subprocess.Popen(cmd, preexec_fn=os.setpgrp)
    if get_os_version() >= LooseVersion('10.12'):
        if err:
            return False
        try:
            with open(plist_path, "rb") as file:
                plist = plistlib.load(file)
        except:  # noqa
            return False
        if not plist:
            return False
        else:
            return True
    elif get_os_version() >= LooseVersion('10.11') and get_os_version() < LooseVersion('10.12'):
        # On 10.11 and lower, /usr/libexec/mdmclient dep nag returns the DEP
        # config data on stderr!
        if b'ConfigurationURL' in err:
            # Make a fake plist with data :(
            plist = {}
            if get_os_version() >= LooseVersion('10.11'):
                try:
                    for line in err.split(b'\n'):
                        if b'ConfigurationURL' in line:
                            # Since this is some stupid output, strip it all
                            strip_line = line.strip(b' ').strip(b';').strip(b'"')
                            strip_line_value = strip_line.split(b' = "')[-1]
                            plist['ConfigurationURL'] = strip_line_value
                            plist_file = open(plist_path, 'wb')
                            plistlib.dump(pl, plist_file)
                            plist_file.close()
                            return True
                except:
                    return False
            return True
        else:
            return False
    else:
        # 10.10 and lower
        cloud_config_exists = False
        retries = 30
        while not cloud_config_exists:
            cloud_config_exists = bool(os.path.isfile(good_record))
            if cloud_config_exists:
                copyfile(good_record, plist_path)
            time.sleep(0.1)
            retries -= 1
            if retries == 0:
                break
        return cloud_config_exists
    return False


def main():
    dot_path = '/private/var/tmp/umad/.check_dep_record'
    main_umad_path = '/Library/umad'
    plist_path = os.path.join(main_umad_path, 'Resources/dep_record.plist')
    if has_dep_activation_record(plist_path):
        umadlog('Has DEP activation record - True')
    else:
        umadlog('Has DEP activation record - False')

    # Stop this from happening all the time
    if os.path.exists(dot_path):
        os.remove(dot_path)

    # Because of what we do with mdmclient on 10.11 we need to force exit 0
    if get_os_version() < LooseVersion('10.11'):
        exit(0)

if __name__ == '__main__':
    main()
